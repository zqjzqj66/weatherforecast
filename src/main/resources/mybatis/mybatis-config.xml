<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<settings>

		<!-- 全局缓存的开关, 默认是true, 因为我们要启用缓存, 为了防止出现问题,直接声明 true -->
		<setting name="cacheEnabled" value="true" />

		<!-- 是否启用懒加载,默认为关, 因为会导致在序列化时出现问题, 为了防止出现问题,直接声明 false -->
		<setting name="lazyLoadingEnabled" value="false" />
		
		
		<!-- 是否允许单一语句返回多结果集,默认为true,应该是指是否可以返回如list等数据,这个我们肯定要, 为了防止出现问题,直接声明 true -->
		<setting name="multipleResultSetsEnabled" value="true" />

		<!-- 这个意思应该是启用列别名,就是说取出来的值表的列名和我们在数据库里运行SQL得到的列名一致, 默认true, 为了防止出现问题,直接声明 
			true -->
		<setting name="useColumnLabel" value="true" />

		<!-- 允许 JDBC 支持自动生成主键,这个我们的主键,若为整型那么一般是数据库自动生成, 要不然是由java程序生成 -->
		<setting name="useGeneratedKeys" value="false" />

		<!-- 指定mybatis 应如何自动映射列到字段或属性, 这里我们采用 默认 PARTIAL -->
		<setting name="autoMappingBehavior" value="PARTIAL" />

		<!-- 指定发现自动映射目标未知列（或者未知属性类型）的行为。 这里我们希望在测试时可以有提示, 所以用 WARNING -->
		<setting name="autoMappingUnknownColumnBehavior" value="WARNING" />

		<!-- 配置默认的执行器。SIMPLE 就是普通的执行器, 这个跟默认走 -->
		<setting name="defaultExecutorType" value="SIMPLE" />

		<!-- 设置超时时间，它决定驱动等待数据库响应的秒数。 -->
		<setting name="defaultStatementTimeout" value="25" />

		<!-- 为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。 -->
		<setting name="defaultFetchSize" value="100" />

		<!-- 允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为false。这个将来我们肯定是要用分页的 -->
		<setting name="safeRowBoundsEnabled" value="false" />

		<!-- 是否开启自动驼峰命名规则（camel case）映射,这个适用于 从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 
			的类似映射 我们一般都是用resultMap完成映射的,所以不用 -->
		<setting name="mapUnderscoreToCamelCase" value="false" />

		<!-- MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 
			默认值为 SESSION， -->
		<setting name="localCacheScope" value="SESSION" />

		<!-- 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 
			NULL、VARCHAR 或 OTHER。 -->
		<setting name="jdbcTypeForNull" value="OTHER" />

		<!-- 指定哪个对象的方法触发一次延迟加载 默认值 -->
		<setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString" />
		<!-- 使用log4j日志 -->
		<setting name="logImpl" value="SLF4J" />
	</settings>
	<!-- 不使用自建类别名, 不方便 -->

	<!-- 使用了分页插件 -->
	<plugins>
		<plugin interceptor="com.github.pagehelper.PageInterceptor">
			<!--分页参数合理化 -->
			<property name="reasonable" value="true" />
		</plugin>
	</plugins>
</configuration>